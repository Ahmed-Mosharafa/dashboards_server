#!/usr/bin/env node
/**
 * Copyright (c) Jupyter Development Team.
 * Distributed under the terms of the Modified BSD License.
 */
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dashboard-proxy:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var config = require('../app/config');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.get('PORT') || 3000);
var https_port = normalizePort(config.get('HTTPS_PORT') || 3001);
var ip = config.get('IP') || '127.0.0.1';
app.set('port', port);
app.set('ip', ip);

/**
 * Create HTTP or HTTPS server.
 */

var server;
//if both key and cert locations are set use them and run in https mode
if (config.get('SSL_OPTIONS')) {
    var options = config.get('SSL_OPTIONS');
    server = https.createServer(options, app).listen(https_port, ip);

    http.createServer(function (req, res) {
        var url_location = "https://" + req.headers['host'].split(":")[0] + ":" + https_port + req.url;
        res.writeHead(301, { "Location": url_location});
        res.end();
    }).listen(port, ip);
    debug('Server set to HTTPS mode');
} else {
    server = http.createServer(app).listen(port, ip);
    debug('Server set to HTTP mode');
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : addr.address + ':' + addr.port;
  console.log('Jupyter dashboard server listening on ' + bind);
}
